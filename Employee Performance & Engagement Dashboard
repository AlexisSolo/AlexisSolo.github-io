## 🚀 Overview
I created a simulated HR dataset and a suite of Power BI measures to highlight employee engagement, performance trends, and risk assessments. This dashboard helps HR managers spot at‑risk teams and monitor workforce health over time.
- **`sql/01_create_tables.sql`**: DDL to define Employees, Engagement, and Performance tables.  
- **`sql/02_insert_sample_data.sql`**: Inserts a handful of sample rows to illustrate the schema.  
- **`sql/03_latest_view.sql`**: Builds a view (`vw_EmployeeLatest`) that surfaces each employee’s most recent metrics using `ROW_NUMBER()`.  
- **`dax/EmployeeMetrics.measures.txt`**: DAX measures for average scores, trends, risk categories, and departmental roll‑ups.

##  How to Use

1. **SQL Setup**  
   - In your SQL editor (e.g., SSMS, Azure Data Studio), run:
     1. `01_create_tables.sql`  
     2. `02_insert_sample_data.sql`  
     3. `03_latest_view.sql`  

2. **Power BI Import**  
   - Connect to your database and import:  
     - The `vw_EmployeeLatest` view  
     - The raw **Engagement** and **Performance** tables  
   - Ensure you have a proper **Date** table marked as “Date table” for time‑intelligence.

3. **Add Measures**  
   - Copy each DAX formula from **`EmployeeMetrics.measures.txt`** into Power BI as a new measure.

4. **Build the Dashboard**  
   - **Cards**: Display top‑level KPIs (Avg Engagement, Avg Performance, % High‑Risk).  
   - **Line Chart**: Plot Engagement Trend vs. Performance Trend.  
   - **Clustered Bar**: Compare Dept Engagement vs. Dept Performance.  
   - **Matrix / Heatmap**: Show department × risk buckets.  
   - **Table**: Employee details with latest scores and risk level.  
   - **Slicers**: Department, Date range, Risk level.

##  Notes & Next Steps

- I chose a blue/orange palette for good contrast and accessibility.  
- Risk thresholds (<2, <3, ≥3) are arbitrary—feel free to adjust.  
- **Next**: Swap out the sample data for your real HR tables, add drill‑through pages, or connect to a cloud data warehouse for scale.
/*
  01_create_tables.sql
  --------------------
  I start by defining three core tables: Employees, Engagement, and Performance.
  Each table has a straightforward schema that reflects a typical HR dataset.
*/

-- Create a table for employee master data
CREATE TABLE Employees (
    EmployeeID    INT         PRIMARY KEY,
    FirstName     VARCHAR(50),
    LastName      VARCHAR(50),
    Department    VARCHAR(50),
    HireDate      DATE
);

-- Create a table to store engagement survey scores
CREATE TABLE Engagement (
    EngagementID  INT         PRIMARY KEY,
    EmployeeID    INT         -- FK to Employees.EmployeeID
   ,SurveyDate    DATE
   ,Score         DECIMAL(4,2)  -- e.g. 4.25 out of 5.00
);

-- Create a table to record performance review ratings
CREATE TABLE Performance (
    PerformanceID INT         PRIMARY KEY,
    EmployeeID    INT         -- FK to Employees.EmployeeID
   ,ReviewDate    DATE
   ,Rating        DECIMAL(3,2)  -- e.g. 3.80 out of 5.00
);
/*
  02_insert_sample_data.sql
  -------------------------
  I add a few rows to each table to simulate a small company.
  You can expand this as needed for testing.
*/

-- Employees: a handful of sample team members
INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, HireDate) VALUES
 (1,'Alice','Smith','Sales','2019-03-15'),
 (2,'Bob','Jones','Finance','2020-07-01'),
 (3,'Carol','Lee','IT','2018-11-20');

-- Engagement: two surveys for Alice, one each for Bob & Carol
INSERT INTO Engagement (EngagementID, EmployeeID, SurveyDate, Score) VALUES
 (1,1,'2025-01-15',4.10),
 (2,1,'2025-04-15',4.30),
 (3,2,'2025-02-10',3.80),
 (4,3,'2025-03-05',4.50);

-- Performance: two reviews for Alice, one each for Bob & Carol
INSERT INTO Performance (PerformanceID, EmployeeID, ReviewDate, Rating) VALUES
 (1,1,'2025-01-31',3.90),
 (2,1,'2025-06-30',4.20),
 (3,2,'2025-04-30',3.50),
 (4,3,'2025-05-31',4.70);
/*
  03_latest_view.sql
  ------------------
  This view grabs each employee’s latest engagement and performance
  using ROW_NUMBER(). I chose ROW_NUMBER() over a MAX-based join
  because it’s more flexible if we ever need multiple “latest” columns.
*/

CREATE VIEW vw_EmployeeLatest AS
WITH LatestEngagement AS (
  SELECT
    EmployeeID,
    Score               AS LatestEngagementScore,
    SurveyDate,
    ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY SurveyDate DESC) AS rn
  FROM Engagement
),
LatestPerformance AS (
  SELECT
    EmployeeID,
    Rating              AS LatestPerformanceRating,
    ReviewDate,
    ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY ReviewDate DESC) AS rn
  FROM Performance
)
SELECT
  e.EmployeeID,
  e.FirstName,
  e.LastName,
  e.Department,
  le.LatestEngagementScore,
  lp.LatestPerformanceRating
FROM Employees e
LEFT JOIN LatestEngagement le
  ON e.EmployeeID = le.EmployeeID AND le.rn = 1
LEFT JOIN LatestPerformance lp
  ON e.EmployeeID = lp.EmployeeID AND lp.rn = 1;
// EmployeeMetrics.measures.txt
// -----------------------------

// I keep all DAX measures here for easy copy‑paste into Power BI.

-- 1. Average Engagement Score
Avg Engagement = AVERAGE( Engagement[Score] )

-- 2. Average Performance Rating
Avg Performance = AVERAGE( Performance[Rating] )

-- 3. Engagement Trend (Last 12 Months)
Engagement Trend = 
CALCULATE(
    AVERAGE( Engagement[Score] ),
    DATESINPERIOD(
        'Date'[Date],
        MAX( 'Date'[Date] ),
        -12, MONTH
    )
)

-- 4. Performance Trend (Last 12 Months)
Performance Trend = 
CALCULATE(
    AVERAGE( Performance[Rating] ),
    DATESINPERIOD(
        'Date'[Date],
        MAX( 'Date'[Date] ),
        -12, MONTH
    )
)

-- 5. Risk Level Category by Performance
Risk Level = 
SWITCH(
    TRUE(),
    [Avg Performance] < 2, "High Risk",
    [Avg Performance] < 3, "Medium Risk",
    "Low Risk"
)

-- 6. Departmental Engagement
Dept Engagement = 
CALCULATE(
    AVERAGE( Engagement[Score] ),
    ALLEXCEPT( Employees, Employees[Department] )
)

-- 7. Departmental Performance
Dept Performance = 
CALCULATE(
    AVERAGE( Performance[Rating] ),
    ALLEXCEPT( Employees, Employees[Department] )
)
